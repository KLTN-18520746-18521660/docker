## Download image to run SQLServer 2019 and sql-tools
FROM mcr.microsoft.com/mssql/server:2019-CU14-ubuntu-20.04
## Download image .net core sdk for develop, build and run
FROM mcr.microsoft.com/dotnet/sdk:5.0

## Evironment variable
# For install and setup SQLServer
ENV ACCEPT_EULA Y
# Username for remote user
ENV REMOTE_USER remote
# Password for remote user
ARG REMOTE_PASSWORD
# Password for remote root
ARG ROOT_PASSWORD
# Passowrd user sa of SQLServer
# ARG SA_PASSWORD

USER root
## Update and install necessary package
RUN apt-get update && apt-get update -y && \
    apt-get install curl -y && \
    apt-get install gnupg -y && \
    apt-get install wget -y && \
    apt-get install build-essential -y

## Install feature full text search for sql server 2019
RUN curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add -
RUN curl https://packages.microsoft.com/config/ubuntu/20.04/mssql-server-2019.list | tee /etc/apt/sources.list.d/mssql-server.list
RUN apt-get update
RUN apt-get install -y mssql-server-fts

## Install chromium, nginx, node 14, npm, angular
RUN apt-get install chromium -y
RUN apt-get install nginx -y
RUN curl -sL https://deb.nodesource.com/setup_14.x | bash -
RUN apt install nodejs -y
RUN npm install -g @angular/cli@12


## Install mssql-tools
RUN curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add -
RUN curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | tee /etc/apt/sources.list.d/msprod.list
RUN apt-get update -y
RUN apt-get install mssql-tools unixodbc-dev -y

## Copy config
COPY ./config /config

## Build and install ssh from source
# Extract source
WORKDIR /config/libc6_2.31/
RUN tar -xf zlib-1.2.11.tar.gz
RUN tar -xf openssl-1.1.1l.tar.gz
RUN tar -xf openssh-8.2p1.tar.gz
# Build and install zlib
WORKDIR /config/libc6_2.31/zlib-1.2.11
RUN ./configure
RUN make
RUN make install 
# Build and install openssl
WORKDIR /config/libc6_2.31/openssl-1.1.1l/
RUN ./config 
RUN make
RUN make install
# Build and install openssh
WORKDIR /config/libc6_2.31/openssh-8.2p1/
RUN ./configure --with-ssl-dir=/usr/local/ssl/lib --with-ipv4-default --with-md5-passwords --without-openssl-header-check
RUN make 
RUN make install

## Install libc6_2.31, libc-bin_2.31 and dependence
WORKDIR /config/libc6_2.31/
RUN dpkg -i libcrypt1_4.4.18-4_amd64.deb
RUN dpkg -i gcc-10-base_10.2.1-6_amd64.deb
RUN dpkg -i libgcc-s1_10.2.1-6_amd64.deb
RUN dpkg -i libc6_2.31-13+deb11u2_amd64.deb
RUN dpkg -i libc-bin_2.31-13+deb11u2_amd64.deb

## Config and update to sure all packages are new and work well
RUN dpkg --configure -a
RUN apt-get -f install -y
RUN update-ca-certificates && \
    apt-get update -y

## Clean unsue packages
RUN apt-get remove curl -y && \
    apt-get remove gnupg -y && \
    apt-get remove build-essential -y && \
    apt-get autoclean -y && \
    apt-get autoremove -y
RUN rm -r /config/libc6_2.31

## Expose ports
# nginx http port
EXPOSE 80
# nginx ssl port
EXPOSE 443
# SQLServer port
EXPOSE 1433
# Back-end port
EXPOSE 7005
# Ssh port
EXPOSE 22

## Config service
# SSH
RUN ssh-keygen -t rsa -f "$HOME/.ssh/id_rsa" -P "" && \
    cat ~/.ssh/id_rsa.pub > ~/.ssh/authorized_keys
RUN groupadd sshd
RUN useradd -g sshd -c 'sshd privsep' -d /var/empty -s /bin/false sshd
# Nginx
RUN mkdir -p /app/html
RUN mkdir -p /app/src
RUN mv /config/nginx/html/* /app/html
# SQLServer
ENV SA_PASSWORD Thesis123
RUN /opt/mssql/bin/sqlservr &
# RUN 
# ARG ARG_SA_PASSWORD

# RUN sleep 120;/opt/mssql-tools/bin/sqlcmd \
#     -S localhost,1433 -U sa \
#     -P "$(read -sp "Enter current sa password: "; echo "${SA_PASSWORD}")" \
#     -Q "ALTER LOGIN SA WITH PASSWORD=\"$(read -sp "Enter new SA password: "; echo "${ARG_SA_PASSWORD}")\""

RUN  unset SA_PASSWORD

## Settings User
# Add user
RUN useradd -m ${REMOTE_USER}
RUN echo ${REMOTE_USER}:${REMOTE_PASSWORD} | chpasswd
# Config user
RUN chsh -s /bin/bash ${REMOTE_USER}
RUN echo root:${ROOT_PASSWORD} | chpasswd
# Set workspace
WORKDIR /home/${REMOTE_USER}

## Settings environment path
RUN echo 'export SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt' >> ~/.bashrc
RUN echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
RUN echo 'export SSL_CERT_DIR=/dev/null' >> ~/.bashrc
RUN echo 'export CHROME_BIN=/usr/bin/chromium' >> ~/.bashrc
RUN source ~/.bashrc; exit 0
RUN . ~/.bashrc; exit 0

## Run necessary services
CMD /usr/local/sbin/sshd && \
    nginx -c /config/nginx/nginx.conf && \
    service nginx start && \
    #/opt/mssql/bin/sqlservr \
    tail -f /var/opt/mssql/log/errorlog
