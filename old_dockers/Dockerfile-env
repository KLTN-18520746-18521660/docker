FROM ubuntu:20.04

##################################### DECLARE ENVIRONMENTS #####################################
## Username for remote user
ENV REMOTE_USER remote
## For install necessary package
ENV TZ Asia
ENV DEBIAN_FRONTEND noninteractiveer
## For config limit ram usage of sqlserver
ENV MAX_RAM_USAGE_SQL 3328

##################################### PRAGRAMS NEED TO BUILD #####################################
## Password for remote user
ARG REMOTE_PASSWORD
## Password for remote root
ARG ROOT_PASSWORD
## Passowrd user sa of SQLServer
# Must have 8 digit, uppercase, lowercase, number
ARG ARG_SA_PASSWORD

##################################### INSTALL DEPENDENCE PACKAGE #####################################
USER root
## Copy config
COPY ./config /config
## Update and install dependence package (will be remove)
RUN apt-get -y update && apt-get install -y curl gnupg build-essential software-properties-common && \
##################################### INSTALL NECESSARY PACKAGE #####################################
## Install sql server 2019
    curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - && \
    curl https://packages.microsoft.com/config/ubuntu/20.04/mssql-server-2019.list | tee /etc/apt/sources.list.d/mssql-server.list && \
    apt-get update -y && apt-get install -y mssql-server && \
    echo '2' | ACCEPT_EULA=Y SA_PASSWORD=${ARG_SA_PASSWORD} /opt/mssql/bin/mssql-conf setup; true && \
## Install feature full text search for sql server 2019
    apt-get install -y mssql-server-fts && \
## Install mssql-tools
    curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | tee /etc/apt/sources.list.d/msprod.list && \
    apt-get update -y && ACCEPT_EULA=Y apt-get install mssql-tools unixodbc-dev -y && \
## Install google-chrome (for run unit test - will remove when publish)
    curl https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb -o google-chrome-stable_current_amd64.deb && \
    dpkg -i google-chrome-stable_current_amd64.deb; true && \
    apt-get install -f -y && \
    rm google-chrome-stable_current_amd64.deb && \
## Install nginx, node 14, npm, angular (for develop - will remove when publish except NGINX)
    echo 'y' | apt --fix-broken install && apt-get install nginx -y && \
    curl -sL https://deb.nodesource.com/setup_14.x | bash - && \
    apt-get install nodejs -y && npm install -g @angular/cli@12 && \
## Install dotnet sdk --version 5.0 (for develop - install runtime instead of sdk when publish)
    curl https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -o packages-microsoft-prod.deb && \
    dpkg -i packages-microsoft-prod.deb && rm packages-microsoft-prod.deb && \
	apt-get install -y apt-transport-https && \
	apt-get update -y && apt-get install -y dotnet-sdk-5.0 && \
## Install ssh, git, sudo
    apt-get install openssh-server git sudo -y && \
##################################### REMOVE UNUSE PACKAGE #####################################
## Config and update to sure all packages are new and work well
    dpkg --configure -a && apt-get install -f -y && \
    update-ca-certificates && \
    apt-get update -y && \
    rm -r /config/libc6_2.31 && \
##################################### CONFIGURATION SERVICES #####################################
## SSH
    ssh-keygen -t rsa -f "$HOME/.ssh/id_rsa" -P "" && \
    cat ~/.ssh/id_rsa.pub > ~/.ssh/authorized_keys && \
    groupadd sshd && \
## Nginx
    mkdir -p /app/html && \
    mkdir -p /app/src && \
    mv /config/nginx/html/* /app/html && \
##################################### SETTINGS USER #####################################
## Add default user ${REMOTE_USER}
    useradd -m ${REMOTE_USER} && \
    echo ${REMOTE_USER}:${REMOTE_PASSWORD} | chpasswd && \
## Config default user remote
    chsh -s /bin/bash ${REMOTE_USER} && \
    echo root:${ROOT_PASSWORD} | chpasswd && \
    echo "${REMOTE_USER} ALL=(ALL) ALL" >> /etc/sudoers && \
##################################### SETTINGS ENVIRONMENT PATH #####################################
## Settings environment path
    echo 'export SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt' >> ~/.bashrc && \
    echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc && \
    echo 'export SSL_CERT_DIR=/dev/null' >> ~/.bashrc && \
    echo 'export CHROME_BIN=/usr/bin/google-chrome-stable' >> ~/.bashrc && \
    # For /bin/bash (bash)
    source ~/.bashrc; true && \
    # For /bin/sh (shell)
    . ~/.bashrc; true

# Set workspace
WORKDIR /home/${REMOTE_USER}
##################################### EXPOSE PORT #####################################
## nginx http port
EXPOSE 80/tcp
## nginx ssl port
EXPOSE 443/tcp
## SQLServer port
EXPOSE 1433/tcp
## Back-end port
EXPOSE 7005/tcp
## Ssh port
EXPOSE 22/tcp
##################################### RUN SERVICE #####################################
## Change user and run service
CMD service ssh start && \
    nginx -c /config/nginx/nginx.conf && \
    service nginx start && \
    /opt/mssql/bin/sqlservr set memory.memorylimitmb ${MAX_RAM_USAGE_SQL}
