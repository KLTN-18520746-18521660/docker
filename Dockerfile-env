FROM ubuntu:20.04

##################################### DECLARE ENVIRONMENTS #####################################
## Username for remote user
ENV REMOTE_USER remote
## For install necessary package
ENV TZ Asia
ENV DEBIAN_FRONTEND noninteractiveer
## For config limit ram usage of sqlserver
ENV MAX_RAM_USAGE_SQL 3328

##################################### PRAGRAMS NEED TO BUILD #####################################
## Password for remote user
ARG REMOTE_PASSWORD
## Password for remote root
ARG ROOT_PASSWORD
## Passowrd user sa of SQLServer
# Must have 8 digit, uppercase, lowercase, number
ARG ARG_SA_PASSWORD

##################################### INSTALL DEPENDENCE PACKAGE #####################################
USER root
## Update and install dependence package (will be remove)
RUN apt-get update -y
RUN apt-get install curl -y
RUN apt-get install gnupg -y
RUN apt-get install wget -y
RUN apt-get install build-essential -y
RUN apt-get install software-properties-common -y

##################################### INSTALL NECESSARY PACKAGE #####################################
## Install sql server 2019/config/ubuntu/20.04/mssql-server-2019.list)"
RUN curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add -
RUN curl https://packages.microsoft.com/config/ubuntu/20.04/mssql-server-2019.list | tee /etc/apt/sources.list.d/mssql-server.list
RUN apt-get update -y
RUN apt-get install -y mssql-server
RUN echo '2' | ACCEPT_EULA=Y SA_PASSWORD=${ARG_SA_PASSWORD} /opt/mssql/bin/mssql-conf setup; exit 0

## Install feature full text search for sql server 2019r-2019.list | tee /etc/apt/sources.list.d/mssql-server.list
RUN apt-get update -y
RUN apt-get install -y mssql-server-fts

## Install mssql-tools
RUN curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | tee /etc/apt/sources.list.d/msprod.list
RUN apt-get update -y
RUN ACCEPT_EULA=Y apt-get install mssql-tools unixodbc-dev -y

## Install google-chrome (for run unit test - will remove when publish)
RUN wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
RUN dpkg -i google-chrome-stable_current_amd64.deb; exit 0
RUN apt-get install -f -y
RUN rm google-chrome-stable_current_amd64.deb

## Install nginx, node 14, npm, angular (for develop - will remove when publish except NGINX)
RUN apt-get install nginx -y
RUN curl -sL https://deb.nodesource.com/setup_14.x | bash -
RUN apt-get install nodejs -y
RUN npm install -g @angular/cli@12

## Install dotnet sdk --version 5.0 (for develop - install runtime instead of sdk when publish)
RUN wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
RUN dpkg -i packages-microsoft-prod.deb
RUN rm packages-microsoft-prod.deb
RUN apt-get update -y && \
	apt-get install -y apt-transport-https && \
	apt-get update -y && \
	apt-get install -y dotnet-sdk-5.0

## Install ssh (necessary for remote)
RUN apt-get install openssh-server -y

## Install git (necessary for develop)
RUN apt-get install git -y

## Install sudo (optional)
RUN apt-get install sudo -y

##################################### REMOVE UNUSE PACKAGE #####################################
## Copy config
COPY ./config /config

## Config and update to sure all packages are new and work well
RUN dpkg --configure -a
RUN apt-get install -f -y
RUN update-ca-certificates && \
    apt-get update -y

## Clean unsue packages
# RUN apt-get remove curl -y && \
#     apt-get remove wget -y && \
#     apt-get remove gnupg -y && \
#     apt-get remove build-essential -y && \
#     apt-get remove software-properties-common -y && \
#     apt-get autoclean -y && \
#     apt-get autoremove -y
RUN rm -r /config/libc6_2.31

##################################### EXPOSE PORT #####################################
## nginx http port
EXPOSE 80/tcp
## nginx ssl port
EXPOSE 443/tcp
## SQLServer port
EXPOSE 1433/tcp
## Back-end port
EXPOSE 7005/tcp
## Ssh port
EXPOSE 22/tcp

##################################### CONFIGURATION SERVICES #####################################
## SSH
RUN ssh-keygen -t rsa -f "$HOME/.ssh/id_rsa" -P "" && \
    cat ~/.ssh/id_rsa.pub > ~/.ssh/authorized_keys
RUN groupadd sshd

## Nginx
RUN mkdir -p /app/html
RUN mkdir -p /app/src
RUN mv /config/nginx/html/* /app/html

##################################### SETTINGS USER #####################################
## Add default user ${REMOTE_USER}
RUN useradd -m ${REMOTE_USER}
RUN echo ${REMOTE_USER}:${REMOTE_PASSWORD} | chpasswd
## Config default user remote

RUN chsh -s /bin/bash ${REMOTE_USER}
RUN echo root:${ROOT_PASSWORD} | chpasswd
RUN echo "${REMOTE_USER} ALL=(ALL) ALL" >> /etc/sudoers

##################################### SETTINGS ENVIRONMENT PATH #####################################
# Set workspace
WORKDIR /home/${REMOTE_USER}

## Settings environment path
RUN echo 'export SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt' >> ~/.bashrc
RUN echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
RUN echo 'export SSL_CERT_DIR=/dev/null' >> ~/.bashrc
RUN echo 'export CHROME_BIN=/usr/bin/google-chrome-stable' >> ~/.bashrc
# For /bin/bash (bash)
RUN source ~/.bashrc; exit 0
# For /bin/sh (shell)
RUN . ~/.bashrc; exit 0

##################################### RUN SERVICE #####################################
## Change user and run service
CMD service ssh start && \
    nginx -c /config/nginx/nginx.conf && \
    service nginx start && \
    /opt/mssql/bin/sqlservr set memory.memorylimitmb ${MAX_RAM_USAGE_SQL}
